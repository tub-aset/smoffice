# coding: utf-8

"""
    ASET Indoor Climate Station

    Enter description here  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SensorData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'sensor_id': 'str',
        'value': 'float',
        'unit': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'source_id': 'sourceId',
        'sensor_id': 'sensorId',
        'value': 'value',
        'unit': 'unit',
        'timestamp': 'timestamp'
    }

    def __init__(self, source_id=None, sensor_id=None, value=None, unit=None, timestamp=None):  # noqa: E501
        """SensorData - a model defined in Swagger"""  # noqa: E501

        self._source_id = None
        self._sensor_id = None
        self._value = None
        self._unit = None
        self._timestamp = None
        self.discriminator = None

        if source_id is not None:
            self.source_id = source_id
        if sensor_id is not None:
            self.sensor_id = sensor_id
        if value is not None:
            self.value = value
        if unit is not None:
            self.unit = unit
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def source_id(self):
        """Gets the source_id of this SensorData.  # noqa: E501


        :return: The source_id of this SensorData.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this SensorData.


        :param source_id: The source_id of this SensorData.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def sensor_id(self):
        """Gets the sensor_id of this SensorData.  # noqa: E501


        :return: The sensor_id of this SensorData.  # noqa: E501
        :rtype: str
        """
        return self._sensor_id

    @sensor_id.setter
    def sensor_id(self, sensor_id):
        """Sets the sensor_id of this SensorData.


        :param sensor_id: The sensor_id of this SensorData.  # noqa: E501
        :type: str
        """

        self._sensor_id = sensor_id

    @property
    def value(self):
        """Gets the value of this SensorData.  # noqa: E501


        :return: The value of this SensorData.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SensorData.


        :param value: The value of this SensorData.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def unit(self):
        """Gets the unit of this SensorData.  # noqa: E501


        :return: The unit of this SensorData.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SensorData.


        :param unit: The unit of this SensorData.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def timestamp(self):
        """Gets the timestamp of this SensorData.  # noqa: E501


        :return: The timestamp of this SensorData.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SensorData.


        :param timestamp: The timestamp of this SensorData.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensorData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensorData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
